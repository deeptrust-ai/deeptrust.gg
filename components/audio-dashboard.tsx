/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/LcYr4RiLR7n
 */
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import {
  TableHead,
  TableRow,
  TableHeader,
  TableCell,
  TableBody,
  Table,
  TableCaption,
} from "@/components/ui/table";
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from "@/components/ui/hover-card";

import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

import Heatmap from "./job/Heatmap";

const EXAMPLE_DATA = [1, 1, 0.1, 0.2, 0.5, 0.6, 1, 1, 1, 0.8];

interface IAudioJob {
  id: string;
  fileName: string; //
  date: string; //
  score?: number;
  heatmapData?: number[];
}

const EXAMPLES: IAudioJob[] = [
  {
    id: "job-0",
    fileName: "call-log-4e6c4a59-393a-435e-bc00-8bdc95d48dec.wav",
    date: "December 04, 2023 11:12 PM",
    score: 82,
    heatmapData: EXAMPLE_DATA,
  },
  {
    id: "job-1",
    fileName: "call-log-4e6c4a59-393a-435e-bc00-8bdc95d48dec.wav",
    date: "December 04, 2023 11:12 PM",
    score: 55,
    heatmapData: EXAMPLE_DATA,
  },
  {
    id: "job-3",
    fileName: "call-log-4e6c4a59-393a-435e-bc00-8bdc95d48dec.wav",
    date: "December 04, 2023 11:12 PM",
    score: 11,
    heatmapData: EXAMPLE_DATA,
  },
  {
    id: "job-4",
    fileName: "call-log-4e6c4a59-393a-435e-bc00-8bdc95d48dec.wav",
    date: "December 04, 2023 11:12 PM",
    // score: 11,
    // heatmapData: EXAMPLE_DATA,
  },
  {
    id: "job-5",
    fileName: "call-log-4e6c4a59-393a-435e-bc00-8bdc95d48dec.wav",
    date: "December 04, 2023 11:12 PM",
    // score: 11,
    // heatmapData: EXAMPLE_DATA,
  },
];

const scoreToMeta = (score: number) => {
  if (score < 50) {
    return ["bg-green-600", "No generated speech detected!", "Real"];
  } else if (score > 80) {
    return ["bg-red-600", "Generated speech detected!", "Fake"];
  } else {
    return [
      "bg-orange-600",
      "Catching patterns of generated speech.",
      "Caution",
    ];
  }
};

const AudioInput = () => (
  <div className="border-r bg-gray-600/40 dark:bg-gray-800/40 rounded-lg shadow-lg">
    <div className="flex flex-col gap-4 p-4">
      <h1 className="font-semibold text-lg md:text-2xl">Speech Input</h1>
      <div className="grid w-full items-center gap-3">
        <Label htmlFor="audio-upload">Upload Audio</Label>
        <Input
          aria-label="Upload audio"
          className="border-gray-300 shadow-sm rounded-lg"
          id="audio-upload"
          type="file"
        />
      </div>
      <hr className="my-4" />
      <Button className="w-full">Detect</Button>
    </div>
  </div>
);

const AudioJobs = ({ jobs }: { jobs: IAudioJob[] }) => {
  const completedJobs = jobs.filter((e) => e.score && e.heatmapData);
  const runningJobs = jobs.filter((e) => !e.score || !e.heatmapData);
  return (
    <div className="flex flex-col gap-4 ">
      <h1 className="font-semibold text-lg md:text-2xl">
        Speech Analysis Jobs
      </h1>
      {/* Completed Jobs */}
      <div className="border shadow-sm rounded-lg bg-gray-600/40 dark:bg-gray-800/40 ">
        <div className="flex flex-col w-full p-4 rounded-lg shadow">
          <h2 className="text-lg font-semibold mb-4">Results</h2>
          {/* <div className="flex flex-col gap-2">
            {completedJobs.map((job) => (
              <CompletedJobCard key={job.fileName} {...job} />
            ))}
          </div> */}
          <CompletedJobsTable completedJobs={completedJobs} />
        </div>
      </div>
      {/* Running Jobs */}
      <div className="border shadow-sm rounded-lg bg-gray-600/40 dark:bg-gray-800/40 ">
        <div className="flex flex-col w-full p-4 rounded-lg shadow">
          <Accordion type="single" collapsible className="w-full">
            <AccordionItem value="running">
              <AccordionTrigger>
                <h2 className="text-lg font-semibold mb-4">Running Jobs</h2>
              </AccordionTrigger>
              <AccordionContent>
                <RunningJobsTable runningJobs={runningJobs} />
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </div>
      </div>
    </div>
  );
};

const CompletedJobCard = ({
  id,
  fileName,
  date,
  score,
  heatmapData,
}: IAudioJob) => {
  if (!score || !heatmapData) return;

  const [color, message, scoreType] = scoreToMeta(score);

  return (
    <div className="flex flex-col gap-2 bg-slate-400 drop-shadow-2xl shadow-2xl p-2 rounded">
      <div className="flex items-center justify-between">
        {/* Metadata */}
        {/* Title */}
        <div className="flex flex-col gap-2">
          <div className="flex gap-2">
            <h3 className="font-semibold">Job ID:</h3>
            <Badge>{id}</Badge>
          </div>
        </div>
        {/* Badge/Score */}
        <div className="flex gap-2">
          <Badge className={`${color}`} variant="secondary">
            {scoreType}
          </Badge>
          <span className="font-semibold">{score}%</span>
        </div>
      </div>
      <Accordion type="single" collapsible className="w-full">
        <AccordionItem value="item-1">
          <AccordionTrigger className="text-xs">
            Click For More Details
          </AccordionTrigger>
          <AccordionContent>
            {/* Heatmap */}
            <div>
              <b>Filename:</b>
              <p className="text-xs text-gray-800">{fileName}</p>
            </div>
            <div>
              <b>Date Launched:</b>{" "}
              <p className="text-xs text-gray-800">{date}</p>
            </div>
            <div className="w-full flex flex-col gap-2">
              <h3 className="font-bold">Heatmap</h3>
              {heatmapData && <Heatmap data={heatmapData} />}
            </div>
          </AccordionContent>
        </AccordionItem>
      </Accordion>
    </div>
  );
};

const RunningJobCard = ({ id, fileName, date }: IAudioJob) => {
  return (
    <div className="flex flex-col gap-2 bg-slate-400 drop-shadow-2xl shadow-2xl p-2 rounded">
      <div className="flex items-center justify-between">
        <div className="flex justify-between items-center w-full">
          <div className="flex gap-2">
            <h3 className="font-semibold">Job ID:</h3>
            <Badge>{id}</Badge>
          </div>
          <span className="text-xs text-gray-800">{fileName}</span>
          <span className="text-xs text-gray-800">{date}</span>
        </div>
      </div>
    </div>
  );
};

const AudioTables = ({ jobs }: { jobs: IAudioJob[] }) => {
  const completedJobs = jobs.filter((e) => e.score && e.heatmapData);
  const runningJobs = jobs.filter((e) => !e.score || !e.heatmapData);

  return <div></div>;
};

const CompletedJobsTable = ({
  completedJobs,
}: {
  completedJobs: IAudioJob[];
}) => (
  <Table className="border rounded-lg">
    <TableCaption>Completed Speech Detection Jobs</TableCaption>
    <TableHeader>
      <TableRow>
        <TableHead className="w-[100px]">Job ID</TableHead>
        <TableCell>File Name</TableCell>
        <TableCell>Score</TableCell>
        <TableCell>Status</TableCell>
        <TableCell className="text-right">Date Launched</TableCell>
      </TableRow>
    </TableHeader>
    <TableBody>
      {completedJobs.map((job) => (
        <CompletedJobRow {...job} />
      ))}
    </TableBody>
  </Table>
);

const CompletedJobRow = ({
  id,
  fileName,
  date,
  score,
  heatmapData,
}: IAudioJob) => {
  if (!score || !heatmapData) return;

  return (
    <>
      <TableRow key={id}>
        <TableCell className="font-medium">{id}</TableCell>
        <TableCell className="text-xs">{fileName}</TableCell>
        <TableCell>{score}%</TableCell>
        <TableCell>
          <HoverBadge score={score} />
        </TableCell>
        <TableCell className="text-right">{date}</TableCell>
      </TableRow>
      <TableRow>
        <TableCell colSpan={5} className="bg-slate-700">
          <Heatmap data={heatmapData} />
        </TableCell>
      </TableRow>
    </>
  );
};

const RunningJobsTable = ({ runningJobs }: { runningJobs: IAudioJob[] }) => (
  <Table className="border rounded-lg">
    <TableCaption>Running Speech Detection Jobs</TableCaption>
    <TableHeader>
      <TableRow>
        <TableHead className="w-[100px]">Job ID</TableHead>
        <TableCell>File Name</TableCell>
        <TableCell className="text-right">Date Launched</TableCell>
      </TableRow>
    </TableHeader>
    <TableBody>
      {runningJobs.map((job) => (
        <TableRow>
          <TableCell>{job.id}</TableCell>
          <TableCell>{job.fileName}</TableCell>
          <TableCell className="text-right">{job.date}</TableCell>
        </TableRow>
      ))}
    </TableBody>
  </Table>
);

const HoverBadge = ({ score }: { score: number }) => {
  const [color, message, scoreType] = scoreToMeta(score);

  return (
    <HoverCard>
      <HoverCardTrigger>
        <Badge className={`${color}`} variant="secondary">
          {scoreType}
        </Badge>
      </HoverCardTrigger>
      <HoverCardContent>{message}</HoverCardContent>
    </HoverCard>
  );
};

export function AudioDashboard() {
  return (
    <div className="grid w-full lg:min-h-[calc(100vh-70px)] lg:grid-cols-[300px,1fr] gap-4 p-6">
      <AudioInput />
      <AudioJobs jobs={EXAMPLES} />
    </div>
  );
}
